알고리즘의 중요 속성
	 1. 정확성 : 주어진 입출력 올바르게 처리
	 2. 효율성 : 효율적으로 문제 해결 (시간 복잡도, 공간 복잡도)
	 
	 시간 복잡도 : 알고리즘이 얼마나 빠르게 결과를 처리 하는지 측정, 입력 크기 n에 대한 시간 함수 T(n)으로 표현
	  
	 Big-O 표기법 (시간 복잡도 )
	 O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(2^n)등의 순서로 복잡
	 
	1. 상수 시간 O(1)
	입력 크기와 상관없이, 고정된 시간으로 계산한다면 알고리즘이 상수 시간(constant time)에 실행된다고 한다.

	- 배열의 n번째 원소에 접근
	- 스택에 push/pop
	- 큐에 삽입/삭제
	- 해시 테이블의 원소에 접근


	2. 선형 시간 O(n)
	알고리즘의 실행 시간이 입력 크기에 정비례

	- 배열의 순회, 최솟/최댓값 찾기 등 연산 (for문)
	- 연결 리스트에서 순회, 최솟/최댓값 찾기 등 연산


	3. 로그 시간 O(logn)
	알고리즘의 실행 시간이 입력 크기의 로그에 비례.
	알고리즘의 각 단계에서 입력의 상당 부분(절반)을 방문하지 않고 지나간다.

	- 이진 탐색(binary search) 알고리즘


	4. N 로그 N 시간 O(nlogn)
	알고리즘의 실행 시간이 입력 크기와 입력크기의 로그 곱에 비례.
	이런 알고리즘은 입력의 절반(또는 일부)으로 나눌 때마다 각 부분을 독립적으로 처리
	
	- 병합 정렬(merge sort)
	- 퀵 정렬(quick sort) - 평균적인 성능, 최악의 시간 복잡도는 O(n^2)
	- 힙 정렬(heap sort)

 

	5. 이차 시간 O(n^2)
	알고리즘의 실행 시간이 입력 크기의 제곱에 비례
	이런 알고리즘은 각 원소를 다른 모든 원소와비교 (이중 for문)


	- 버블 정렬(bubble sort)
	- 선택 정렬(selectrion sort)
	- 삽입 정렬(insertion sort)


	6. 지수 시간 O(2^n)
	입력 데이터들의 원소들로 만들 수 있는 모든 부분 집합을 생성


	7. 계승 시간 O(n!)
	입력 데이터의 원소들로 만들 수 있는 모든 순열을 생성
	 
	 
	 공간 복잡도 :알고리즘이 얼마나 메모리를 사용하는지 측정